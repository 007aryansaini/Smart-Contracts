// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


contract lottery {
      
      address payable[] public players;
      address payable public manager;

      constructor(){
          manager = payable(msg.sender);
          players.push(manager);
      }

      function participate() public payable {
          require( msg.sender != manager , "Manager cannot participate.");
          require( msg.value == 1 ether , "0.1 ether are required to participate.");
          players.push(payable(msg.sender));
      }

      function getBalance() public view returns(uint){
            return address(this).balance;
      }

      function getRandomNumber() private view returns(uint){
           return uint(keccak256(abi.encodePacked(block.difficulty , block.timestamp , msg.sender , players.length)));
      }

      function Pickwinner() public {
          require(msg.sender == manager , "You cannot have access");
          require( players.length >= 3 , "Players are less than 3");
              uint index = getRandomNumber() % players.length;
              address payable winnerAddr = players[index];
 
              uint managerCommission = (10 * getBalance()) / 100;
              uint winnerAmount = getBalance() - managerCommission;
              
              manager.transfer(managerCommission);
              winnerAddr.transfer(winnerAmount);

              players = new address payable[](0);

      }



}
