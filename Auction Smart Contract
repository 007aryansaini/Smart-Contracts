// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AuctionCreator{
     Auction[] public auctions;

     function createAuction() public {
          Auction newAuction = new Auction(msg.sender);
          auctions.push(newAuction);
     }
}

contract Auction{
    address payable public owner;
    uint public startBlock;
    uint public endblock;
    string public ipfsHash;
    mapping(address => uint ) public bids;

    uint public HighestBindingBid;
    address payable public HighestBidder;

    enum state{started , running , ended , cancelled}

    state auctionState;
    uint bidIncreament;

    constructor(address _owner){
        owner = payable(_owner);
        startBlock = block.number;
        endblock = startBlock + 5760;
        ipfsHash = "";
        auctionState = state.running;
        bidIncreament = 1 ether;

    }

    modifier onlyOwner{
        require(msg.sender == owner);
        _;
    }
    modifier notOwner{
        require(msg.sender != owner);
        _;
    }
    modifier afterStart{
        require( block.number >= startBlock);
        _;
    }

    modifier beforeEnd{
        require(block.number <= endblock);
        _;
    }

    function min(uint _a , uint _b) private pure returns(uint){
         if( _a <= _b){
             return _a;
         }else {
             return _b;
         }
    }

    function cencelAuction() public onlyOwner{
        auctionState = state.cancelled;
    }

    function placeBid() public payable notOwner afterStart beforeEnd {
        require( auctionState == state.running , "Auction ended.");
        
        uint currentBid = bids[msg.sender] + msg.value;

        require(currentBid > HighestBindingBid );

        bids[msg.sender] = currentBid;

        if( currentBid <= HighestBindingBid ){
                 HighestBindingBid = min(currentBid + bidIncreament , HighestBindingBid);
        }else{
                HighestBindingBid = min( currentBid , HighestBindingBid + bidIncreament);
                HighestBidder = payable(msg.sender);
        }

    }

    function withdrawFunds() public {
           require( auctionState == state.cancelled || block.number > endblock);
           require ( msg.sender == owner || bids[msg.sender] > 0);

            uint fund;
            address payable receipent;

            if( msg.sender == owner){
                   fund = HighestBindingBid;
                   receipent = owner;
            }else{
                   if( msg.sender == HighestBidder ){
                          receipent = HighestBidder;
                          fund = bids[msg.sender] - HighestBindingBid;
                   }else{
                          receipent = payable(msg.sender);
                          fund = bids[msg.sender];
                   }
            }

            bids[msg.sender] = 0;
            receipent.transfer(fund);
    }


}
